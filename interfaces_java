/* 
class - class -> extends
class - interface -> implements
interface - interface -> extends
*/

/*
**** Interfaces ****
- Another way to achieve abstraction in Java is interface.
- An interface is a completely "abstract class" that is used to group related methods with empty bodies
*/

// interface
interface Animal {
    public void animalSound();  // interface method
    public void sleep();
}

/*
- Like abstract classes, interfaces cannot be used to create objects
- Interface methods do not have a body - the body is provided by the "implement" class
- On implementation of an interface, you must override all of its methods
- Interface methods are by default abstract and public
- Interface attributes are by default public, static and final
- Java does not support "multiple inheritance" but it can be achieved with interfaces, because the class can implement multiple interfaces, separate them with a comma
*/


class Doggy implements Animal{

    public void animalSound(){
        System.out.println("The Doggy says: Bhau Bhau");
    }

    public void sleep() {
        System.out.println("Zzz");
  }
}


class java_interface
{
    public static void main(String args[])
    {
        Doggy obj = new Doggy();
        obj.animalSound();
        obj.sleep();
    }
}